flutter run lib/main/main.dart 

Antes do null safety ate aula 120
Version flutter 1.22.5
Dart 2.10.4

Depois:
Version flutter 2.5.1

## Secao 1: Introducao

terminal:
git config --global --edit
git config --global core.editor code
git config --global core.editor '/Applications/Visual Studio Code.app/Contents/MacOS/Electron' -w
git config --global --edit

Before:
[filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
[user]
        name = Leandro
        email = l.e.c.o321@hotmail.com
[code]
        editor = code

After:

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[user]
	name = Leandro
	email = l.e.c.o321@hotmail.com
[core]
	editor = '/Applications/Visual Studio Code.app/Contents/MacOS/Electron' -w --wait
[alias]
	c = !git add --all && git commit -m // ajudar a commit
	s = !git status -s // short forma reduzida
	l = !git log --pretty=format:'%C(blue)%h%C(red)%d - %C(white)%s - %C(cyan)%cn, %C(green)%cr'
	t = !sh -c 'git tag -a $1 -m $1' - // gerar tag de maneira fcail
	amend = !git add --all && git commit --amend --no-edit // juntar commit (Nao fazer commit duplicados) - juntar com anterior com o proximo commit
[push]
	followTags = true // Envia so para o servidor que voce fez, e nao envia as tags que voce fez, mas com followTafs = true, ele envia as tags anotadas

%h = hash do commit
%d = Branch que esta usando
%s = mensagem do commit
%cn = autor (Commiter name)
%cr = data (Tempo passado / Data daquele commit)

## Secao 2: Authentication - Domain e Data Layers

BDD = Desenvolvimento Guiado por Comportamento (Behavior-driven development)
Visao de alguem nao tecnico - Como sistema de Comportamento
Descricao para alguem nao tecnico

Classes Abstradatas => Interfaces/Protocolos e a mesma coisa que uma classe Abstradata
Tracejado e arredondado (Interface / Abstracao) no diagrama

Camada e a partes do diagrama

Classe Authentication => Classe Abstradata

Domain => Fica as regras de negocio (Nao tem codigo) (Simplesmente classes abstradas e entidades)
Dominio da aplicacao

AccountEntity => Entidade (Modelo)

Data Layer => Business logic ou application

DOMINIO NAO TEM CLASSES CONCRETAS

A implementacao dos metodos ficam em outra camada

Secao2_1.png

Aula: 2.2

Nao precisa testar DomainLayer.
Interfaces e classes abstratas;

* Criar sempre um arquivo dart com o nome data para fazer as exportacoes;
* Import => Se e bibloteca de terceiros usa path completo e se for classe nossa usar ../clase.dart (Que assim jah sabemos o que e nosso e o que e de terceiros);

Aula: 2.3

Escrever testes => Componente do remoteAuthentication

criar arquivo: remote_authentication_test.dart

aula: 2.9 - Testando caso de sucesso.

2_9.png